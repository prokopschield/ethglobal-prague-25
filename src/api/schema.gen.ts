/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** search */
        get: operations["search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/check-redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** search redirect */
        get: operations["search redirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transactions */
        get: operations["get_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get blocks */
        get: operations["get_blocks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token-transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token transfers */
        get: operations["get_token_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get internal transactions */
        get: operations["get_internal_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/main-page/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get main page transactions */
        get: operations["get_main_page_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/main-page/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get main page blocks */
        get: operations["get_main_page_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/main-page/indexing-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get indexing status */
        get: operations["get_indexing_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get stats counters */
        get: operations["get_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/charts/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transactions chart */
        get: operations["get_txs_chart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/charts/market": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get market chart */
        get: operations["get_market_chart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction info */
        get: operations["get_tx"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/token-transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction token transfers */
        get: operations["get_transaction_token_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/internal-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction internal transactions */
        get: operations["get_transaction_internal_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction logs */
        get: operations["get_transaction_logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/raw-trace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction raw trace */
        get: operations["get_transaction_raw_trace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/state-changes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transaction state changes */
        get: operations["get_transaction_state_changes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_hash}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get human-readable transaction summary */
        get: operations["get_transaction_summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{block_number_or_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get block info */
        get: operations["get_block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{block_number_or_hash}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get block transactions */
        get: operations["get_block_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{block_number_or_hash}/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get block withdrawals */
        get: operations["get_block_withdrawals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get native coin holders list */
        get: operations["get_addresses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address info */
        get: operations["get_address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/counters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address counters */
        get: operations["get_address_counters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address transactions */
        get: operations["get_address_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/token-transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address token transfers */
        get: operations["get_address_token_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/internal-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address internal transactions */
        get: operations["get_address_internal_txs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address logs */
        get: operations["get_address_logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/blocks-validated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get blocks validated by address */
        get: operations["get_address_blocks_validated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/token-balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get all tokens balances for the address */
        get: operations["get_address_token_balances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** token balances with filtering and pagination */
        get: operations["get_address_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/coin-balance-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address coin balance history */
        get: operations["get_address_coin_balance_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/coin-balance-history-by-day": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address coin balance history by day */
        get: operations["get_address_coin_balance_history_by_day"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get address withdrawals */
        get: operations["get_address_withdrawals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/nft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get list of NFT owned by address */
        get: operations["get_address_nft"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{address_hash}/nft/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get list of NFT owned by address, grouped by collection */
        get: operations["get_address_nft_collections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get tokens list */
        get: operations["get_tokens_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token info */
        get: operations["get_token"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token token transfers */
        get: operations["get_token_token_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token holders */
        get: operations["get_token_holders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/counters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token holders */
        get: operations["get_token_counters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get NFT instances */
        get: operations["get_nft_instances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get NFT instance by id */
        get: operations["get_nft_instance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances/{id}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transfers of NFT instance */
        get: operations["get_nft_instance_transfers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances/{id}/holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get token instance holders */
        get: operations["get_token_instance_holders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances/{id}/transfers-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get transfers count of NFT instance */
        get: operations["get_nft_instance_transfers_count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{address_hash}/instances/{id}/refetch-metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** re-fetch token instance metadata */
        patch: operations["refetch_token_instance_metadata"];
        trace?: never;
    };
    "/smart-contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get verified smart contracts */
        get: operations["get_smart_contracts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/smart-contracts/counters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get verified smart contracts counters */
        get: operations["get_smart_contracts_counters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/smart-contracts/{address_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get smart contract */
        get: operations["get_smart_contract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/json-rpc-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get json rpc url */
        get: operations["get_json_rpc_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get withdrawals */
        get: operations["get_withdrawals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proxy/account-abstraction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get account abstraction indexing status */
        get: operations["get_account_abstraction_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/celestia/blob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CelestiaService_GetBlob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/celestia/l2BatchMetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CelestiaService_GetL2BatchMetadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** If the requested service is unknown, the call will fail with status
         *     NOT_FOUND. */
        get: operations["Health_Check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Block: {
            /** @example 26618801760 */
            base_fee_per_gas: string;
            /** @example 261263193229977120 */
            burnt_fees: string;
            /** @example 85.19028810863084 */
            burnt_fees_percentage: number;
            /** @example 0 */
            difficulty: string;
            /** @example TODO */
            extra_data: string;
            /** @example 30000000 */
            gas_limit: string;
            /** @example -34.56675333333333 */
            gas_target_percentage: number;
            /** @example 9814987 */
            gas_used: string;
            /** @example 32.71662333333333 */
            gas_used_percentage: number;
            /** @example 0xf569ec751152b2f814001fc730f7797aa155e4bc3ba9cb6ba24bc2c8c9468c1a */
            hash: string;
            /** @example 17615720 */
            height: number;
            miner: components["schemas"]["AddressParam"];
            /** @example 0x0000000000000000 */
            nonce: string;
            /** @example 0xd464e02d81e2bdf6bc5fa9b8e33f0b564c464a82d821a3e56531f8636dc00dfa */
            parent_hash: string;
            /** @example 45418705646601378 */
            priority_fee: string;
            rewards: components["schemas"]["Reward"][];
            /** @example 49997 */
            size: number;
            /** @example TODO */
            state_root: string;
            /** @example 2023-07-03T20:09:59.000000Z */
            timestamp: string;
            /** @example 58750003716598352816469 */
            total_difficulty: string;
            /** @example 120 */
            transaction_count: number;
            /** @example 306681898876578498 */
            transaction_fees: string;
            /** @example block */
            type: string;
            uncles_hashes: string[];
            /** @example 16 */
            withdrawals_count: number;
        };
        TokenTransfer: {
            /** @example 0xf569ec751152b2f814001fc730f7797aa155e4bc3ba9cb6ba24bc2c8c9468c1a */
            block_hash: string;
            from: components["schemas"]["AddressParam"];
            /** @example 16 */
            log_index: number;
            /** @example transfer */
            method?: string;
            /** @example 2023-07-03T20:09:59.000000Z */
            timestamp?: string;
            to: components["schemas"]["AddressParam"];
            token: components["schemas"]["TokenInfo"];
            total: components["schemas"]["TotalERC20"] | components["schemas"]["TotalERC721"] | components["schemas"]["TotalERC1155"];
            /** @example 0x6662ad1ad2ea899e9e27832dc202fd2ef915a5d2816c1142e6933cff93f7c592 */
            transaction_hash: string;
            /** @example token_transfer */
            type: string;
        };
        RawTrace: {
            action: components["schemas"]["RawTraceCallAction"] | components["schemas"]["RawTraceCreateAction"] | components["schemas"]["RawTraceSelfDestructAction"];
            /** @example 0 */
            subtraces: number;
            /** @example [
             *       0,
             *       0
             *     ] */
            traceAddress: number[];
            /** @example call */
            type: string;
            /** @example Reverted */
            error?: string;
            result?: components["schemas"]["RawTraceCallResult"] | components["schemas"]["RawTraceCreateResult"];
        };
        RawTraceCallAction: {
            /** @example call */
            callType: string;
            /** @example 0x162e898bd0aacb578c8d5f8d6ca588c13d2a383f */
            to: string;
            /** @example 0xf57b55b01b831e602e09674a4e5d69cbcf343f98 */
            from: string;
            /** @example 0x630cea8e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041c25b36779231e71769118210c3eb64c0a9c7577b925b309af3183e13acc7cf30210493d13c8c6c3c0bd337d5e39e454fece0c301f0aedb6c43c7a37650ac83e71c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019500050000f0add9e5dc02faeca12e9669f045685449d6b80a000000000000744359447362798334d3485c64d1e4870fde2ddc0d75f0b456250dc9990662a6f25808cc74a6d1131ea9000927c001018064382ae87cdd000000000000000000000000bab3cbdcbcc578445480a79ed80269c50bb5b71800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000351af1631aa5ea1ca62ad8a4e3cd87128d4d910800000000000000000000000000000000000000000000005b8decde02914ce837000000000000000000000000000000000000000000000000000000000000001e4d45444f4f5a412045636f73797374656d2076322e30206f6e2078446169000000000000000000000000000000000000000000000000000000000000000000044d445a41000000000000000000000000000000000000000000000000000000000000000000000000000000 */
            input: string;
            /** @example 0x25D3FC */
            gas: string;
            /** @example 0x0 */
            value: string;
        };
        RawTraceCreateAction: {
            /** @example 0xf57b55b01b831e602e09674a4e5d69cbcf343f98 */
            from: string;
            /** @example 0x25D3FC */
            gas: string;
            /** @example 0x630cea8e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041c25b36779231e71769118210c3eb64c0a9c7577b925b309af3183e13acc7cf30210493d13c8c6c3c0bd337d5e39e454fece0c301f0aedb6c43c7a37650ac83e71c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019500050000f0add9e5dc02faeca12e9669f045685449d6b80a000000000000744359447362798334d3485c64d1e4870fde2ddc0d75f0b456250dc9990662a6f25808cc74a6d1131ea9000927c001018064382ae87cdd000000000000000000000000bab3cbdcbcc578445480a79ed80269c50bb5b71800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000351af1631aa5ea1ca62ad8a4e3cd87128d4d910800000000000000000000000000000000000000000000005b8decde02914ce837000000000000000000000000000000000000000000000000000000000000001e4d45444f4f5a412045636f73797374656d2076322e30206f6e2078446169000000000000000000000000000000000000000000000000000000000000000000044d445a41000000000000000000000000000000000000000000000000000000000000000000000000000000 */
            init: string;
            /** @example 0x0 */
            value: string;
        };
        RawTraceSelfDestructAction: {
            /** @example 0xf57b55b01b831e602e09674a4e5d69cbcf343f98 */
            address: string;
            /** @example 0x25D3FC */
            balance: string;
            /** @example 0x162e898bd0aacb578c8d5f8d6ca588c13d2a383f */
            refundAddress: string;
        };
        RawTraceCallResult: {
            /** @example 0x25D3FC */
            gasUsed: string;
            /** @example 0x0 */
            output: string;
        };
        RawTraceCreateResult: {
            /** @example 0xf57b55b01b831e602e09674a4e5d69cbcf343f98 */
            address: string;
            /** @example 0x25D3FC */
            code: string;
            /** @example 0x25D3FC */
            gasUsed: string;
        };
        Log: {
            address: components["schemas"]["AddressParam"];
            /** @example 0xf90fdff5f174f7f29ebdf203d32cad2fe95376e41880bb9e731ca5eb0eef7941 */
            block_hash?: string;
            /** @example 8844586 */
            block_number?: number;
            /** @example 0x000000000000000000000000000000000000000000000000006a94d74f430000 */
            data: string;
            /** @example {
             *       "method_call": "Transfer(address indexed from, address indexed to, uint256 tokens)",
             *       "method_id": "0x630cea8e",
             *       "parameters": [
             *         {
             *           "name": "signature",
             *           "type": "bytes",
             *           "indexed?": true,
             *           "value": "0x0"
             *         },
             *         {
             *           "name": "message",
             *           "type": "bytes",
             *           "indexed?": false,
             *           "value": "0x01"
             *         }
             *       ]
             *     } */
            decoded: components["schemas"]["DecodedInputLog"];
            /** @example 35 */
            index: number;
            smart_contract: components["schemas"]["AddressParam"];
            topics: string[];
            /** @example 0x08ea4d75ad0abe327a7fd368733eaeac43077989e635d800530d7906ebf3bd54 */
            transaction_hash: string;
        };
        InternalTransaction: {
            /** @example 8844586 */
            block_number: number;
            created_contract: components["schemas"]["AddressParam"];
            /** @example reverted */
            error: string;
            from: components["schemas"]["AddressParam"];
            /** @example 351759 */
            gas_limit: string;
            /** @example 1 */
            index: number;
            /** @example true */
            success: boolean;
            /** @example 2023-04-17T10:37:12.000000Z */
            timestamp: string;
            to: components["schemas"]["AddressParam"];
            /** @example 0x08ea4d75ad0abe327a7fd368733eaeac43077989e635d800530d7906ebf3bd54 */
            transaction_hash: string;
            /** @example call */
            type: string;
            /** @example 30000000000000000 */
            value: string;
        };
        Fee: {
            /** @example maximum | actual */
            type: string;
            /** @example 9853224000000000 */
            value: string;
        };
        Transaction: {
            /** @example 2022-08-02T07:18:05.000000Z */
            timestamp: string;
            fee: components["schemas"]["Fee"];
            gas_limit: number;
            /**
             * Format: int32
             * @example 23484035
             */
            block_number: number;
            /** @example ok | error */
            status: string;
            /** @example transferFrom */
            method: string;
            /** @example 1035 */
            confirmations: number;
            /** @example 2 */
            type: number;
            /** @example 1866.51 */
            exchange_rate: string;
            to: components["schemas"]["AddressParam"];
            /** @example 1099596081903840 */
            transaction_burnt_fee: string;
            /** @example 55357460102 */
            max_fee_per_gas: string;
            /** @example Error: (Awaiting internal transactions for reason) */
            result: string;
            /** @example 0x5d90a9da2b8da402b11bc92c8011ec8a62a2d59da5c7ac4ae0f73ec51bb73368 */
            hash: string;
            /** @example 26668595172 */
            gas_price: string;
            /** @example 2056916056308 */
            priority_fee: string;
            /** @example 26618801760 */
            base_fee_per_gas: string;
            from: components["schemas"]["AddressParam"];
            token_transfers: components["schemas"]["TokenTransfer"][];
            /** @example [
             *       "token_transfer",
             *       "contract_creation",
             *       "contract_call",
             *       "token_creation",
             *       "coin_transfer"
             *     ] */
            transaction_types: string[];
            /** @example 41309 */
            gas_used: string;
            created_contract: components["schemas"]["AddressParam"];
            /** @example 117 */
            position: number;
            /** @example 115 */
            nonce: number;
            /** @example false */
            has_error_in_internal_transactions: boolean;
            actions: components["schemas"]["TransactionAction"][];
            decoded_input: components["schemas"]["DecodedInput"];
            /** @example false */
            token_transfers_overflow: boolean;
            /** @example 0xa9059cbb000000000000000000000000ef8801eaf234ff82801821ffe2d78d60a0237f97000000000000000000000000000000000000000000000000000000003178cb80 */
            raw_input: string;
            /** @example 0 */
            value: string;
            /** @example 49793412 */
            max_priority_fee_per_gas: string;
            /** @example Error: (Awaiting internal transactions for reason) */
            revert_reason: string;
            /** @example [
             *       0,
             *       17479
             *     ] */
            confirmation_duration: Record<string, never>;
            /** @example private_transaction_tag */
            transaction_tag: string;
        };
        ExtendedRevertReasonAsMap: {
            /** @example 4b415032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365 */
            raw: string;
            code: number;
            /** @example Reverted */
            message: string;
        };
        /** @example {
         *       "inputs": [],
         *       "method_id": "2e64cec1",
         *       "name": "retrieve",
         *       "outputs": [
         *         {
         *           "internalType": "uint256",
         *           "name": "",
         *           "type": "uint256",
         *           "value": 0
         *         }
         *       ],
         *       "stateMutability": "view",
         *       "type": "function"
         *     } */
        ReadMethodWithValue: Record<string, never>;
        /** @example {
         *       "inputs": [],
         *       "method_id": "f851a440",
         *       "name": "admin",
         *       "outputs": [
         *         {
         *           "internalType": "address",
         *           "name": "admin_",
         *           "type": "address"
         *         }
         *       ],
         *       "stateMutability": "nonpayable",
         *       "type": "function"
         *     } */
        ReadMethodWithoutValue: Record<string, never>;
        /** @example {
         *       "inputs": [
         *         {
         *           "internalType": "uint256",
         *           "name": "num",
         *           "type": "uint256"
         *         }
         *       ],
         *       "name": "store",
         *       "outputs": [],
         *       "stateMutability": "nonpayable",
         *       "type": "function"
         *     } */
        WriteMethod: Record<string, never>;
        DecodedInput: {
            /** @example transferFrom(address _from, address _to, uint256 _value) */
            method_call: string;
            /** @example 23b872dd */
            method_id: string;
            parameters: components["schemas"]["DecodedInputParameter"][];
        };
        TokenAddressParam: {
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            hash: string;
            /** @example implementationName */
            implementation_name: string;
            /** @example contractName */
            name: string;
            is_contract: boolean;
            is_verified: boolean;
            private_tags: components["schemas"]["AddressTag"][];
            public_tags: components["schemas"]["AddressTag"][];
            watchlist_names: components["schemas"]["WatchlistName"][];
            /**
             * @description Address
             * @example 0x123abc...
             */
            address?: string;
        };
        TransactionSummary: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["TransactionSummaryObj"];
        };
        TransactionSummaryObj: {
            summaries?: components["schemas"]["Summary"][];
        };
        Summary: {
            /**
             * @description Summary template
             * @example {action_type} of {amount} {token}
             */
            summary_template: string;
            /** @description Variables for summary */
            summary_template_variables: components["schemas"]["SummaryTemplateVariables"];
        };
        SummaryTemplateVariables: {
            /** @description Action type */
            action_type: components["schemas"]["SummaryVariable"];
            /** @description Amount */
            amount: components["schemas"]["SummaryVariableCurrency"];
            /** @description Token info */
            token: components["schemas"]["SummaryVariableToken"];
        };
        SummaryVariable: {
            /**
             * @description Variable type
             * @example string
             */
            type: string;
            /**
             * @description Action Type
             * @example Registered withdrawal of
             */
            value: string;
        };
        SummaryVariableCurrency: {
            /**
             * @description Currency type
             * @example currency
             */
            type: string;
            /**
             * @description Value
             * @example 0.195999999980484004
             */
            value: string;
        };
        SummaryVariableToken: {
            /**
             * @description Type
             * @example token
             */
            type: string;
            /** @description Token info */
            value: components["schemas"]["TokenInfoDetailed"];
        };
        TokenInfoDetailed: {
            /**
             * @description Token Address
             * @example 0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc
             */
            address: string;
            /**
             * @description Token circulating market cap
             * @example 0.0
             */
            circulating_market_cap: string;
            /**
             * @description Token decimals
             * @example 18
             */
            decimals: string;
            /**
             * @description Token exchange rate
             * @example 2890.96
             */
            exchange_rate: string;
            /**
             * @description Token holders amount
             * @example 2999
             */
            holders: string;
            /**
             * @description Token image URL
             * @example https://assets.coingecko.com/coins/images/39410/small/Steakhouse_logo-05.jpg?1722053893
             */
            icon_url: string;
            /**
             * @description Token name
             * @example Steakhouse Resteaking Vault
             */
            name: string;
            /**
             * @description Token symbol
             * @example steakLRT
             */
            symbol: string;
            /**
             * @description Token total supply
             * @example 9710057205959239302188
             */
            total_supply: string;
            /**
             * @description Token type
             * @example ERC-20
             */
            type: string;
            /**
             * @description Token trading volume for past 24h
             * @example 24298.765344836862
             */
            volume_24h: string;
        };
        DecodedInputParameter: {
            /** @example signature */
            name: string;
            /** @example bytes */
            type: string;
            /** @example 0x0 */
            value: string;
        };
        DecodedInputLog: {
            /** @example transferFrom(address _from, address _to, uint256 _value) */
            method_call: string;
            /** @example 23b872dd */
            method_id: string;
            parameters: components["schemas"]["DecodedInputLogParameter"][];
        };
        DecodedInputLogParameter: {
            /** @example signature */
            name: string;
            /** @example bytes */
            type: string;
            /** @example 0x0 */
            value: string;
            indexed: boolean;
        };
        AddressParam: {
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            hash: string;
            /** @example implementationName */
            implementation_name: string;
            /** @example contractName */
            name: string;
            /** @example domain.eth */
            ens_domain_name?: string;
            /** @example {
             *       "slug": "tag_slug",
             *       "name": "Tag name",
             *       "tagType": "name",
             *       "ordinal": 0,
             *       "meta": {}
             *     } */
            metadata?: Record<string, never>;
            is_contract: boolean;
            private_tags: components["schemas"]["AddressTag"][];
            watchlist_names: components["schemas"]["WatchlistName"][];
            public_tags: components["schemas"]["AddressTag"][];
            is_verified: boolean;
        };
        AddressTag: {
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            address_hash: string;
            /** @example name to show */
            display_name: string;
            /** @example label */
            label: string;
        };
        WatchlistName: {
            /** @example name to show */
            display_name: string;
            /** @example label */
            label: string;
        };
        Address: {
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            creator_address_hash?: string;
            /** @example 0x1f610ff9c1efad6b5a8bb6afcc0786cd7343f03f9a61e2544fcff908cedee924 */
            creation_transaction_hash?: string;
            token?: components["schemas"]["TokenInfo"];
            /** @example 10000000 */
            coin_balance?: string;
            /** @example 1.01 */
            exchange_rate?: string;
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            implementation_address?: string;
            /** @example 27656552 */
            block_number_balance_updated_at?: number;
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            hash: string;
            /** @example implementationName */
            implementation_name?: string;
            /** @example contractName */
            name?: string;
            is_contract?: boolean;
            private_tags?: components["schemas"]["AddressTag"][];
            watchlist_names?: components["schemas"]["WatchlistName"][];
            public_tags?: components["schemas"]["AddressTag"][];
            is_verified?: boolean;
            has_beacon_chain_withdrawals?: boolean;
            has_logs?: boolean;
            has_token_transfers?: boolean;
            has_tokens?: boolean;
            has_validated_blocks?: boolean;
        };
        AddressWithTxCount: components["schemas"]["Address"] & {
            /** @example 1234 */
            transaction_count: string;
        };
        Reward: {
            reward: number;
            /** @example Miner Reward | Emission Reward | Chore Reward | Uncle Reward */
            type: string;
        };
        TransactionReward: {
            /** @example [
             *       "reward"
             *     ] */
            types: Record<string, never>;
            /** @example 500000000000000000 */
            emission_reward: string;
            /** @example 0x3169a7e9c513462403abb40eaa4fa51c5fbe1b908606e6eeef16232e308cb464 */
            block_hash: string;
            from: components["schemas"]["AddressParam"];
            to: components["schemas"]["AddressParam"];
        };
        AddressCounters: {
            /** @example 0 */
            transactions_count: string;
            /** @example 0 */
            token_transfers_count: string;
            /** @example 0 */
            gas_usage_count: string;
            /** @example 0 */
            validations_count: string;
        };
        TokenBalance: {
            token_instance?: components["schemas"]["NFTInstance"];
            /** @example 10000 */
            value: string;
            /** @example 123 */
            token_id: string;
            token: components["schemas"]["Token"];
        };
        CoinBalanceHistoryEntry: {
            /** @example 0x1f610ff9c1efad6b5a8bb6afcc0786cd7343f03f9a61e2544fcff908cedee924 */
            transaction_hash?: string;
            /** @example 1584930 */
            block_number: number;
            /** @example 2022-08-02T07:18:05.000000Z */
            block_timestamp: string;
            /** @example -234959404 */
            delta: string;
            /** @example 100232323 */
            value: string;
        };
        CoinBalanceHistoryByDaysEntry: {
            /** @example 2022-08-02 */
            date: string;
            /** @example 100232323 */
            value: number;
        };
        Token: {
            /** @example Tether USD */
            name: string;
            /** @example 16 */
            decimals: string;
            /** @example USDT */
            symbol: string;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            address: string;
            /** @example ERC-20 */
            type: string;
            /** @example 837494234523 */
            holders: number;
            /** @example 0.99 */
            exchange_rate: string;
            /** @example 10000000 */
            total_supply: string;
        };
        TotalERC20: {
            /** @example 18 */
            decimals: string;
            /** @example 1000 */
            value: string;
        };
        TotalERC721: {
            /** @example 1 */
            token_id: string;
            token_instance?: components["schemas"]["NFTInstance"];
        };
        TotalERC1155: {
            /** @example 1 */
            token_id: string;
            /** @example null */
            decimals: string;
            /** @example 1000 */
            value: string;
            token_instance?: components["schemas"]["NFTInstance"];
        };
        Holder: {
            address: components["schemas"]["AddressParam"];
            /** @example 10000 */
            value: string;
            /** @example 10000 */
            token_id?: string;
        };
        NFTInstance: {
            is_unique: boolean;
            /** @example 431 */
            id: string;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            holder_address_hash?: string;
            /** @example example.com/picture.png */
            image_url?: string;
            /** @example example.com/video.mp4 */
            animation_url?: string;
            /** @example d-app.com */
            external_app_url?: string;
            /** @example {
             *       "year": 2023,
             *       "tags": [
             *         "poap",
             *         "event"
             *       ],
             *       "name": "Social Listening Committee #2 Attendees",
             *       "image_url": "https://assets.poap.xyz/chanel-poap-4c-2023-logo-1675083420470.png",
             *       "home_url": "https://app.poap.xyz/token/6292128",
             *       "external_url": "https://api.poap.tech/metadata/99010/6292128",
             *       "description": "This is the POAP for attendees of the second Social Listening Committee.",
             *       "attributes": [
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "startDate"
             *         },
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "endDate"
             *         },
             *         {
             *           "value": "false",
             *           "trait_type": "virtualEvent"
             *         },
             *         {
             *           "value": "Paris",
             *           "trait_type": "city"
             *         },
             *         {
             *           "value": "France",
             *           "trait_type": "country"
             *         },
             *         {
             *           "value": "https://www.chanel.com",
             *           "trait_type": "eventURL"
             *         }
             *       ]
             *     } */
            metadata?: Record<string, never>;
            owner: components["schemas"]["AddressParam"];
            token: components["schemas"]["TokenInfo"];
        };
        AddressNFTInstance: {
            is_unique: boolean;
            /** @example 431 */
            id: string;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            holder_address_hash?: string;
            /** @example example.com/picture.png */
            image_url?: string;
            /** @example example.com/video.mp4 */
            animation_url?: string;
            /** @example d-app.com */
            external_app_url?: string;
            /** @example {
             *       "year": 2023,
             *       "tags": [
             *         "poap",
             *         "event"
             *       ],
             *       "name": "Social Listening Committee #2 Attendees",
             *       "image_url": "https://assets.poap.xyz/chanel-poap-4c-2023-logo-1675083420470.png",
             *       "home_url": "https://app.poap.xyz/token/6292128",
             *       "external_url": "https://api.poap.tech/metadata/99010/6292128",
             *       "description": "This is the POAP for attendees of the second Social Listening Committee.",
             *       "attributes": [
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "startDate"
             *         },
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "endDate"
             *         },
             *         {
             *           "value": "false",
             *           "trait_type": "virtualEvent"
             *         },
             *         {
             *           "value": "Paris",
             *           "trait_type": "city"
             *         },
             *         {
             *           "value": "France",
             *           "trait_type": "country"
             *         },
             *         {
             *           "value": "https://www.chanel.com",
             *           "trait_type": "eventURL"
             *         }
             *       ]
             *     } */
            metadata?: Record<string, never>;
            owner: components["schemas"]["AddressParam"];
            token: components["schemas"]["TokenInfo"];
            /** @example ERC-721 */
            token_type: string;
            /** @example 1 */
            value: string;
        };
        AddressNFTInstanceCollection: {
            is_unique: boolean;
            /** @example 431 */
            id: string;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            holder_address_hash?: string;
            /** @example example.com/picture.png */
            image_url?: string;
            /** @example example.com/video.mp4 */
            animation_url?: string;
            /** @example d-app.com */
            external_app_url?: string;
            /** @example {
             *       "year": 2023,
             *       "tags": [
             *         "poap",
             *         "event"
             *       ],
             *       "name": "Social Listening Committee #2 Attendees",
             *       "image_url": "https://assets.poap.xyz/chanel-poap-4c-2023-logo-1675083420470.png",
             *       "home_url": "https://app.poap.xyz/token/6292128",
             *       "external_url": "https://api.poap.tech/metadata/99010/6292128",
             *       "description": "This is the POAP for attendees of the second Social Listening Committee.",
             *       "attributes": [
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "startDate"
             *         },
             *         {
             *           "value": "01-Feb-2023",
             *           "trait_type": "endDate"
             *         },
             *         {
             *           "value": "false",
             *           "trait_type": "virtualEvent"
             *         },
             *         {
             *           "value": "Paris",
             *           "trait_type": "city"
             *         },
             *         {
             *           "value": "France",
             *           "trait_type": "country"
             *         },
             *         {
             *           "value": "https://www.chanel.com",
             *           "trait_type": "eventURL"
             *         }
             *       ]
             *     } */
            metadata?: Record<string, never>;
            owner: components["schemas"]["AddressParam"];
            /** @example null */
            token?: Record<string, never>;
            /** @example ERC-721 */
            token_type: string;
            /** @example 1 */
            value: string;
        };
        AddressNFTCollection: {
            token: components["schemas"]["TokenInfo"];
            /** @example 1 */
            amount?: string;
            token_instances: components["schemas"]["AddressNFTInstanceCollection"][];
        };
        SmartContract: {
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            verified_twin_address_hash?: string;
            is_verified?: boolean;
            is_changed_bytecode?: boolean;
            is_partially_verified?: boolean;
            is_fully_verified?: boolean;
            is_verified_via_sourcify?: boolean;
            is_verified_via_eth_bytecode_db?: boolean;
            is_self_destructed?: boolean;
            can_be_visualized_via_sol2uml?: boolean;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            minimal_proxy_address_hash?: string;
            /** @example https://sourcify.repo.com/100/link_to_a_contract_at_sourcify */
            sourcify_repo_url?: string;
            /** @example Cryptostamp3L2 */
            name?: string;
            /** @example false */
            optimization_enabled?: boolean;
            /** @example 200 */
            optimizations_runs?: number;
            /** @example v0.8.4+commit.c7e474f2 */
            compiler_version?: string;
            /** @example default */
            evm_version?: string;
            /** @example 2021-06-02T17:54:17.116055Z */
            verified_at?: string;
            /** @example [{"type":"constructor","stateMutability":"nonpayable","inputs":[{"type":"address","name":"_bridgeDataAddress","internalType":"address"},{"type":"uint256","name":"_finalSupply","internalType":"uint256"},{"type":"uint256[5]","name":"_totalColorSupply","internalType":"uint256[5]"}]}] */
            abi?: string;
            /** @example contract A {} */
            source_code?: string;
            /** @example contract.sol */
            file_path?: string;
            /** @example {
             *       "compilationTarget": {
             *         "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": "ERC1967Proxy"
             *       },
             *       "evmVersion": "london",
             *       "libraries": {},
             *       "metadata": {
             *         "bytecodeHash": "ipfs"
             *       },
             *       "optimizer": {
             *         "enabled": true,
             *         "runs": 200
             *       },
             *       "remappings": []
             *     } */
            compiler_settings?: Record<string, never>;
            /** @example 0x01 */
            constructor_args?: string;
            additional_sources?: components["schemas"]["ContractSource"][];
            decoded_constructor_args?: components["schemas"]["ConstructorArguments"][];
            /** @example 0x01 */
            deployed_bytecode?: string;
            /** @example 0x02 */
            creation_bytecode?: string;
            external_libraries?: components["schemas"]["ExternalLibrary"][];
            /** @example solidity | vyper | yul */
            language?: string;
            /** @example selfdestructed | failed | success */
            status?: string;
        };
        ExternalLibrary: {
            /** @example MathLib */
            name: string;
            /** @example 0xF61f5c4a3664501F499A9289AaEe76a709CE536e */
            address_hash: string;
        };
        ContractSource: {
            /** @example contracts/erc-20.sol */
            file_path?: string;
            /** @example pragma solidity ^0.8.0; \n contract A {} */
            source_code?: string;
        };
        /** @example [
         *       "0x2a3885b3f0c98f3e36334d4fa7beda53cb0ae095",
         *       {
         *         "internalType": "address",
         *         "name": "_logic",
         *         "type": "address"
         *       }
         *     ] */
        ConstructorArguments: Record<string, never>;
        TokenInfo: {
            /** @example 83606435600.3635 */
            circulating_market_cap: string;
            /** @example https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png */
            icon_url: string;
            /** @example Tether USD */
            name: string;
            /** @example 6 */
            decimals: string;
            /** @example USDT */
            symbol: string;
            /** @example 0x394c399dbA25B99Ab7708EdB505d755B3aa29997 */
            address: string;
            /** @example ERC-20 */
            type: string;
            /** @example 837494234523 */
            holders: string;
            /** @example 0.99 */
            exchange_rate: string;
            /** @example 10000000 */
            total_supply: string;
        };
        Argument: {
            name?: string;
            /** @example uint256 */
            type?: string;
            /** @example 100000 */
            value?: string;
        };
        SearchResultRedirect: {
            /** @example 0xEb533ee5687044E622C69c58B1B12329F56eD9ad */
            parameter: string;
            redirect: boolean;
            /** @example address | block | transaction */
            type: string;
        };
        SearchResultToken: {
            /** @example 0xdAC17F958D2ee523a2206206994597C13D831ec7 */
            address: string;
            /** @example /address/0xdAC17F958D2ee523a2206206994597C13D831ec7 */
            address_url: string;
            /** @example 0.999813 */
            exchange_rate: string;
            /** @example https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png */
            icon_url: string;
            /** @example true */
            is_smart_contract_verified: boolean;
            /** @example Tether USD */
            name: string;
            /** @example USDT */
            symbol: string;
            /** @example ERC-20 */
            token_type: string;
            /** @example /token/0xdAC17F958D2ee523a2206206994597C13D831ec7 */
            token_url: string;
            /** @example 39030615894320966 */
            total_supply: string;
            /** @example token */
            type: string;
        };
        SearchResultAddressOrContract: {
            /** @example 0xe2FBdeADC82c71C1b8bFf9CA4f9E7666224A362c */
            address: string;
            /** @example true */
            is_smart_contract_verified: boolean;
            /** @example Name */
            name: string;
            /** @example address|contract */
            type: string;
            /** @example /xdai/mainnet/address/0xc1c1031e4A44B98707203480029e6576CB3267e3 */
            url: string;
        };
        SearchResultBlock: {
            /** @example 0xba83e9ba0b43e8d112a07fdab08d53f473d2b7fb0e585bd437ae739933db203e */
            block_hash: string;
            /** @example 24816691 */
            block_number: number;
            /** @example 2022-10-31T07:18:05.000000Z */
            timestamp: string;
            /** @example block */
            type: string;
            /** @example /xdai/mainnet/block/0xba83e9ba0b43e8d112a07fdab08d53f473d2b7fb0e585bd437ae739933db203e */
            url: string;
        };
        SearchResultTransaction: {
            /** @example 2022-10-31T07:18:05.000000Z */
            timestamp: string;
            /** @example 0xe38c6772f33edfbd218f59853befe18391cb786f911fb6c0b00ed6dd72ef6e69 */
            transaction_hash: string;
            /** @example transaction */
            type: string;
            /** @example /xdai/mainnet/tx/0xe38c6772f33edfbd218f59853befe18391cb786f911fb6c0b00ed6dd72ef6e69 */
            url: string;
        };
        IndexingStatus: {
            finished_indexing: boolean;
            finished_indexing_blocks: boolean;
            /** @example 1.0 */
            indexed_blocks_ratio: string;
            /** @example 1.0 */
            indexed_internal_transactions_ratio: string | null;
        };
        StatsResponse: {
            /** @example 508700 */
            total_blocks: string;
            /** @example 982340 */
            total_addresses: string;
            /** @example 1699427 */
            total_transactions: string;
            /** @example 25000 */
            average_block_time: number;
            /** @example 0.00254957 */
            coin_price: string;
            /** @example 0 */
            total_gas_used: string;
            /** @example 622 */
            transactions_today: string;
            /** @example 49063630 */
            gas_used_today: string;
            /** @example {
             *       "average": 10,
             *       "fast": 10,
             *       "slow": 10
             *     } */
            gas_prices: Record<string, never>;
            /** @example 10.1 */
            static_gas_price: string;
            /** @example 420471.10604559750644 */
            market_cap: string;
            /** @example 40.2142 */
            network_utilization_percentage: number;
        };
        MarketChartItem: {
            /** @example 2022-10-31 */
            date: string;
            /** @example 0.00254915 */
            closing_price: string;
            /** @example 420471.10604559750644 */
            market_cap: string;
        };
        TransactionChartItem: {
            /** @example 2022-10-31 */
            date: string;
            /** @example 622 */
            transaction_count: number;
        };
        TokenCounters: {
            /** @example 100 */
            token_holders_count: string;
            /** @example 1000 */
            transfers_count: string;
        };
        RecaptchaBody: {
            /** @example 123 */
            recaptcha_response: string;
        };
        ReadMethodQueryBody: {
            /** @example [
             *       1123,
             *       "0xBb36c792B9B45Aaf8b848A1392B0d6559202729E"
             *     ] */
            args: unknown[];
            /** @example ab470f05 */
            method_id: string;
            /** @example 0xBb36c792B9B45Aaf8b848A1392B0d6559202729E */
            from?: string;
            /** @example proxy | regular */
            contract_type?: string;
        };
        ReadMethodResponse: {
            is_error: boolean;
            result: components["schemas"]["ExtendedRevertReasonAsMap"] | components["schemas"]["Error"] | components["schemas"]["DecodedInput"] | components["schemas"]["CodeAndMessage"] | components["schemas"]["OutputAndNames"];
        };
        CodeAndMessage: {
            code: number;
            /** @example Reverted */
            message: string;
        };
        Error: {
            /** @example Some error */
            error: string;
        };
        OutputAndNames: {
            /** @example [
             *       {
             *         "type": "uint256",
             *         "value": 0
             *       }
             *     ] */
            output: unknown[];
            /** @example [
             *       null
             *     ] */
            names: unknown[];
        };
        StateChange: {
            token?: components["schemas"]["TokenInfo"];
            /** @example coin | token */
            type: string;
            is_miner: boolean;
            address: components["schemas"]["AddressParam"];
            /** @example 100000000 */
            balance_before?: string;
            /** @example 100000000 */
            balance_after?: string;
            /** @example null */
            token_id?: string;
            change?: components["schemas"]["NFTChangesArray"] | components["schemas"]["ERC20Or1155OrCoinChange"];
        };
        /** @example -10000000 */
        ERC20Or1155OrCoinChange: string;
        NFTChangesArray: components["schemas"]["NFTChange"][];
        NFTChange: {
            /** @example from | to */
            direction: string;
            total: components["schemas"]["TotalERC721"];
        };
        SmartContractForList: {
            address: components["schemas"]["AddressParam"];
            /** @example 10000 */
            coin_balance: string;
            /** @example v0.5.10+commit.5a6ea5b1 */
            compiler_version: string;
            /** @example vyper | yul | solidity */
            language: string;
            has_constructor_args: boolean;
            optimization_enabled: boolean;
            transaction_count?: number;
            /** @example 2022-03-05T11:40:29.087000Z */
            verified_at: string;
            /** @example 1000000000.0001 */
            market_cap?: number;
        };
        Withdrawal: {
            /** @example 1 */
            index: number;
            /** @example 1000000000000000000 */
            amount: string;
            /** @example 1 */
            validator_index: number;
            receiver?: components["schemas"]["AddressParam"];
            /** @example 1 */
            block_number?: number;
            /** @example 2023-06-20T07:55:00.000000Z */
            timestamp?: string;
        };
        TransactionAction: components["schemas"]["TransactionActionAaveV3LiquidationCall"] | components["schemas"]["TransactionActionAaveV3BSWRF"] | components["schemas"]["TransactionActionAaveV3EnableDisableCollateral"] | components["schemas"]["TransactionActionUniswapV3MintNFT"] | components["schemas"]["TransactionActionUniswapV3BCS"];
        TransactionActionAaveV3LiquidationCall: {
            /** @example {
             *       "debt_amount": "1.289548595490270429",
             *       "debt_symbol": "AAVE",
             *       "debt_address": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
             *       "collateral_amount": "110.824768",
             *       "collateral_symbol": "USDC",
             *       "collateral_address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
             *       "block_number": 1
             *     } */
            data: Record<string, never>;
            /** @example aave_v3 */
            protocol: string;
            /** @example liquidation_call */
            type: string;
        };
        TransactionActionAaveV3BSWRF: {
            /** @example {
             *       "amount": "1.289548595490270429",
             *       "symbol": "AAVE",
             *       "address": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
             *       "block_number": 1
             *     } */
            data: Record<string, never>;
            /** @example aave_v3 */
            protocol: string;
            /** @example borrow | supply | withdraw | repay | flash_loan */
            type: string;
        };
        TransactionActionAaveV3EnableDisableCollateral: {
            /** @example {
             *       "symbol": "AAVE",
             *       "address": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
             *       "block_number": 1
             *     } */
            data: Record<string, never>;
            /** @example aave_v3 */
            protocol: string;
            /** @example enable_collateral | disable_collateral */
            type: string;
        };
        TransactionActionUniswapV3MintNFT: {
            /** @example {
             *       "name": "Uniswap V3: Positions NFT",
             *       "symbol": "UNI-V3-POS",
             *       "address": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
             *       "to": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
             *       "ids": [
             *         "1",
             *         "2"
             *       ],
             *       "block_number": 1
             *     } */
            data: Record<string, never>;
            /** @example uniswap_v3 */
            protocol: string;
            /** @example mint_nft */
            type: string;
        };
        TransactionActionUniswapV3BCS: {
            /** @example {
             *       "address0": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
             *       "address1": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
             *       "amount0": "1.289548595490270429",
             *       "amount1": "110.824768",
             *       "symbol0": "AAVE",
             *       "symbol1": "USDC"
             *     } */
            data: Record<string, never>;
            /** @example uniswap_v3 */
            protocol: string;
            /** @example burn | collect | swap */
            type: string;
        };
        v1IndexerStatus: {
            finished_past_indexing?: boolean;
            v06?: components["schemas"]["v1EntryPointIndexerStatus"];
            v07?: components["schemas"]["v1EntryPointIndexerStatus"];
        };
        v1EntryPointIndexerStatus: {
            enabled?: boolean;
            live?: boolean;
            past_db_logs_indexing_finished?: boolean;
            past_rpc_logs_indexing_finished?: boolean;
        };
        /**
         * @description  - SERVICE_UNKNOWN: Used only by the Watch method.
         * @default UNKNOWN
         * @enum {string}
         */
        HealthCheckResponseServingStatus: "UNKNOWN" | "SERVING" | "NOT_SERVING" | "SERVICE_UNKNOWN";
        protobufAny: {
            "@type"?: string;
        } & {
            [key: string]: unknown;
        };
        rpcStatus: {
            /** Format: int32 */
            code?: number;
            message?: string;
            details?: components["schemas"]["protobufAny"][];
        };
        v1CelestiaBlob: {
            /** Format: uint64 */
            height?: string;
            namespace?: string;
            commitment?: string;
            /** Format: uint64 */
            timestamp?: string;
            /** Format: uint64 */
            size?: string;
            data?: string;
        };
        v1CelestiaBlobId: {
            /** Format: uint64 */
            height?: string;
            namespace?: string;
            commitment?: string;
        };
        v1CelestiaL2BatchMetadata: {
            /** Format: int64 */
            l2ChainId?: number;
            l2BatchId?: string;
            /** Format: uint64 */
            l2StartBlock?: string;
            /** Format: uint64 */
            l2EndBlock?: string;
            /** Format: int64 */
            l2BatchTxCount?: number;
            l2BlockscoutUrl?: string;
            l1TxHash?: string;
            /** Format: uint64 */
            l1TxTimestamp?: string;
            /** Format: int64 */
            l1ChainId?: number;
            relatedBlobs?: components["schemas"]["v1CelestiaBlobId"][];
        };
        v1HealthCheckResponse: {
            status?: components["schemas"]["HealthCheckResponseServingStatus"];
        };
    };
    responses: never;
    parameters: {
        /** @description Address hash */
        addressHash: string;
        /** @description the name of address in watchlist */
        addressName: string;
        /** @description Transaction hash */
        transactionHash: string;
        /** @description Block number or hash */
        blockNumberOrHash: string;
        /** @description integer id */
        id: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    search: {
        parameters: {
            query?: {
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: (components["schemas"]["SearchResultToken"] | components["schemas"]["SearchResultAddressOrContract"] | components["schemas"]["SearchResultBlock"] | components["schemas"]["SearchResultTransaction"])[];
                        /** @example {
                         *       "address_hash": "0x052Ad78E3aA0b0F2D3912FD3b50a9a289CF2f7Aa",
                         *       "block_hash": null,
                         *       "holder_count": 548,
                         *       "inserted_at": "2021-12-07T08:39:01.062253Z",
                         *       "item_type": "token",
                         *       "items_count": 50,
                         *       "name": "RealToken S 13245 Monica St Detroit MI",
                         *       "q": "1",
                         *       "transaction_hash": null
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "search redirect": {
        parameters: {
            query?: {
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description search response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResultRedirect"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_txs: {
        parameters: {
            query?: {
                filter?: string;
                type?: string;
                method?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Transaction"][];
                        /** @example {
                         *       "block_number": 27170298,
                         *       "index": 0,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_blocks: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Block"][];
                        /** @example {
                         *       "block_number": 27729304,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_transfers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token transfers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenTransfer"][];
                        /** @example {
                         *       "block_number": 27170298,
                         *       "index": 0
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_internal_transactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description internal transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["InternalTransaction"][];
                        /** @example {
                         *       "block_number": 27170298,
                         *       "index": 0,
                         *       "transaction_index": 0
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
        };
    };
    get_main_page_txs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"][];
                };
            };
        };
    };
    get_main_page_tokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description blocks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"][];
                };
            };
        };
    };
    get_indexing_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description indexing status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IndexingStatus"];
                };
            };
        };
    };
    get_stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description stats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatsResponse"];
                };
            };
        };
    };
    get_txs_chart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description transaction chart */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        chart_data: components["schemas"]["TransactionChartItem"][];
                    };
                };
            };
        };
    };
    get_market_chart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description market chart */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 164918857.718061 */
                        available_supply: string;
                        chart_data: components["schemas"]["MarketChartItem"][];
                    };
                };
            };
        };
    };
    get_tx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description transaction info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_token_transfers: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token transfers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenTransfer"][];
                        /** @example {
                         *       "block_number": 27350206,
                         *       "index": 1,
                         *       "items_count": 50,
                         *       "transaction_hash": "0xa3b401d6f3124c9d1528cd8d4b692f523d86fd88e48c391ffe9c67e4436ae5ca"
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_internal_txs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description internal transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["InternalTransaction"][];
                        /** @example {
                         *       "block_number": 27350206,
                         *       "index": 1,
                         *       "items_count": 50,
                         *       "transaction_index": 0
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_logs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description internal transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Log"][];
                        /** @example {
                         *       "index": 0,
                         *       "items_count": 50,
                         *       "block_number": 2
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_raw_trace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description raw trace */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RawTrace"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_state_changes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description state changes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["StateChange"][];
                        /** @example {
                         *       "items_count": 1,
                         *       "state_changes": null
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_transaction_summary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction hash */
                transaction_hash: components["parameters"]["transactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description human-readable transaction summary */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionSummary"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Block number or hash */
                block_number_or_hash: components["parameters"]["blockNumberOrHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block_txs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Block number or hash */
                block_number_or_hash: components["parameters"]["blockNumberOrHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description block */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Transaction"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 4,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_block_withdrawals: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Block number or hash */
                block_number_or_hash: components["parameters"]["blockNumberOrHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description block's withdrawals (pay attention that block_number together with timestamp fields is not included to response in this endpoint) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Withdrawal"][];
                        /** @example {
                         *       "index": 1,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_addresses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 0.01 */
                        exchange_rate: string;
                        /** @example 100000000 */
                        total_supply: string;
                        items: components["schemas"]["AddressWithTxCount"][];
                        /** @example {
                         *       "fetched_coin_balance": "269536604956070000000",
                         *       "hash": "0xf74769d9ffe1cd17f20b283995cf9e7fa2a262ed",
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Address"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_counters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressCounters"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_txs: {
        parameters: {
            query?: {
                filter?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Transaction"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 4,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_token_transfers: {
        parameters: {
            query?: {
                type?: string;
                filter?: string;
                token?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenTransfer"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 4
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_internal_txs: {
        parameters: {
            query?: {
                filter?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["InternalTransaction"][];
                        /** @example {
                         *       "block_number": 27625575,
                         *       "index": 0,
                         *       "items_count": 50,
                         *       "transaction_index": 0
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_logs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Log"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 68,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_blocks_validated: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Block"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_token_balances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenBalance"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_tokens: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenBalance"][];
                        /** @example {
                         *       "items_count": 50,
                         *       "token_name": null,
                         *       "token_type": "ERC-1155",
                         *       "value": 14
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_coin_balance_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["CoinBalanceHistoryEntry"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_coin_balance_history_by_day: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CoinBalanceHistoryByDaysEntry"][];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_withdrawals: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description pay attention that receiver field is not included to response in this endpoint */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Withdrawal"][];
                        /** @example {
                         *       "index": 1,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_nft: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["AddressNFTInstance"][];
                        /** @example {
                         *       "token_contract_address_hash": "0xb81afe27c103bcd42f4026cf719af6d802928765",
                         *       "token_id": "1011",
                         *       "token_type": "ERC-721"
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_address_nft_collections: {
        parameters: {
            query?: {
                type?: string;
            };
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["AddressNFTCollection"][];
                        /** @example {
                         *       "token_contract_address_hash": "0xb81afe27c103bcd42f4026cf719af6d802928765",
                         *       "token_type": "ERC-721"
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_tokens_list: {
        parameters: {
            query?: {
                q?: string;
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenInfo"][];
                        /** @example {
                         *       "contract_address_hash": "0x68749665ff8d2d112fa859aa293f07a622782f38",
                         *       "holder_count": 1011,
                         *       "is_name_null": false,
                         *       "items_count": 50,
                         *       "market_cap": "482534473.2170469",
                         *       "name": "Tether Gold"
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenInfo"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_token_transfers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenTransfer"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 61
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_holders: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Holder"][];
                        /** @example {
                         *       "items_count": 2,
                         *       "value": 790000000000000000000
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_counters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenCounters"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_nft_instances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["NFTInstance"][];
                        /** @example {
                         *       "unique_token": 97464
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_nft_instance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
                /** @description integer id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NFTInstance"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_nft_instance_transfers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
                /** @description integer id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["TokenTransfer"][];
                        /** @example {
                         *       "block_number": 27736955,
                         *       "index": 61,
                         *       "token_id": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_token_instance_holders: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
                /** @description integer id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Holder"][];
                        /** @example {
                         *       "value": 790000000000000000000,
                         *       "token_id": "953848",
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_nft_instance_transfers_count: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
                /** @description integer id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 10 */
                        transfers_count: number;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refetch_token_instance_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
                /** @description integer id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecaptchaBody"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example OK */
                        message?: string;
                    };
                };
            };
            /** @description Invalid reCAPTCHA response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid reCAPTCHA response */
                        message?: string;
                    };
                };
            };
        };
    };
    get_smart_contracts: {
        parameters: {
            query?: {
                q?: string;
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description smart contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["SmartContractForList"][];
                        /** @example {
                         *       "items_count": 50,
                         *       "smart_contract_id": 46
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_smart_contracts_counters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description smart contracts counters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 12 */
                        new_smart_contracts_24h: string;
                        /** @example 11 */
                        new_verified_smart_contracts_24h: string;
                        /** @example 20 */
                        smart_contracts: string;
                        /** @example 15 */
                        verified_smart_contracts: string;
                    };
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_smart_contract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address hash */
                address_hash: components["parameters"]["addressHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description smart contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SmartContract"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_json_rpc_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description json rpc url */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example https://core.poa.network */
                        json_rpc_url: string;
                    };
                };
            };
        };
    };
    get_withdrawals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description withdrawals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Withdrawal"][];
                        /** @example {
                         *       "index": 1,
                         *       "items_count": 50
                         *     } */
                        next_page_params: Record<string, never>;
                    };
                };
            };
        };
    };
    get_account_abstraction_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["v1IndexerStatus"];
                };
            };
            /** @description unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CelestiaService_GetBlob: {
        parameters: {
            query?: {
                height?: string;
                commitment?: string;
                skipData?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["v1CelestiaBlob"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rpcStatus"];
                };
            };
        };
    };
    CelestiaService_GetL2BatchMetadata: {
        parameters: {
            query?: {
                height?: string;
                namespace?: string;
                commitment?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["v1CelestiaL2BatchMetadata"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rpcStatus"];
                };
            };
        };
    };
    Health_Check: {
        parameters: {
            query?: {
                service?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["v1HealthCheckResponse"];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rpcStatus"];
                };
            };
        };
    };
}
